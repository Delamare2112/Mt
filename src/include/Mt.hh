/*
	Mt.hh - Generic and core includes and definitions
*/
#pragma once
// Named this way because str is defined in a *lot* of
// the standard headers, so I had do improvise
#define mk__str(s) __mkstr(s)
#define __mkstr(s) #s

#include <iostream>
#include <string>
#include <iomanip>
#include <csignal>

#if !defined(_NOFUN)
#include <random>
    std::string quotes[] = {
        "Gliiv likes colons.",
        "\"I think Computation is destined to be the defining idea of our future.\"\n\t- Stephen Wolfram",
        "\"The essence of mathematics lies in its freedom.\" - Georg Cantor",
        "Math problems? Call 1-800-[(10x)(13i)^2]-[sin(xy)/2.362x].",
        "Mathematics teachers call retirement 'the aftermath'."
    };
#endif

#include <immintrin.h>

#include <core/Config.hh>
#include <core/lang/SParser.hh>
#include <core/ModuleEngine.hh>

#define ERROR_SUCCESS 0
#define ERROR_FAILURE 1

#if !defined(VERSION)
#define VERSION "N/A"
#endif

#if defined(_MSC_VER)
#define COMPILER "MSVC " mk__str(_MSC_VER)
#elif defined(__clang__)
#define COMPILER "clang " __clang_version__
#elif defined(__GNUC__)
#define COMPILER "GCC " mk__str( __GNUC__) "." mk__str(__GNUC_MINOR__)  "." mk__str(__GNUC_PATCHLEVEL__)
#endif

#if defined(_DEBUG) || defined(DEBUG)
#define MODE "DEBUG"
#else
#define MODE "RELEASE"
#endif


#define VERSION_STRING "Mt: Simple math and linear algebra environment. " << std::endl << "\tVer " VERSION " (" COMPILER ") " MODE " Build"

#define QUOTE "\"I'm so clever that even I don't understand myself sometimes.\""


void Term(int Signal);


/*! \namespace Mt
    \brief Core Mt functionality

    The Mt namespace contains all functionality related to Mt itself.
*/
namespace Mt {
	/*! \namespace Mt::core
		\brief Core Mt Functionality

		This namespace contains all of the core functionality of Mt
	*/
	namespace core {
		/*! \namespace Mt::core::lang
			\brief SML Components
	
			All components for the simple math language reside in this namespace.
			This also includes the bison generated code, however that is under the yy namespace.
		*/
		namespace lang {}
	}
	/*! \namespace Mt::objects
		\brief Mt Operable Objects

		All items in this namespace are objects that Mt can operate on, such as Mt::objects::Complex
	*/
	namespace objects {}

}

/*! \namespace yy
    \brief Parser and Lexer
    
    This namespace contains all code generated by the SML grammar files to build the SML parser and lexer.
    Nothing in this namespace is written by hand, it is all auto generated.
*/
namespace yy {}

/*! \mainpage Mt - Mathematics Environment

    \section intro Introduction

    This documentation details the working of Mt at a mid-level for understanding.

    This provides a means for anyone who is new on the project, or that wants to know
    how the project works, to get antiquated with some of the in-s and outs.

    Each member and class will have it's own documentation on it's finite details and it's
    internal workings, allowing for an in-depth look at explicit functionality.

    \section overview Overview

    Mt is developed as a part of MAT342 - Linear Algebra as a free, cross-platform student made 
    replacement for MathWorks MatLab. Mt uses a new language called SML, or Simple[Sane] Math Language.
    SML allows for one to describe mathematical problems in a simple, succinct way.

    Mt is also built to be extensible and open, anyone can build a module that can expand Mt or SML and have it
    work with any other Mt setup.

    \section sml SML

    Simple[Sane] Math Language is the language that is used by Mt. It allows for the user to express mathematical
    constructs in a way that seems as natural as possible. Disbanding all of the forced pragmatic constructs such
    as for loops, allowing one to express even things like summations in a succinct way.

    A mathematic expression written in SML looks just like it would on paper

    ~~~
    1+2-sin(4)
    ~~~

    More complex examples can be expressed as well, like functions

    ~~~
    F := (x) {
        ret sin(x)+x/1
    }
    ~~~

    For more information see the SML.md document

    \section modules Modules

    Mt is modular by default, allowing for anyone to build extensions onto the core Mt engine,
    to do so, all one needs to do is implement the Mt::Module class in their module and call the
    MODULE macro to make it a module, a simple module will look like this.

    ~~~{.cpp}
    #include <Module.hh>

    Mt::Module::Module(void) {
        // Initialization Code
    }

    Mt::Module::~Module(void) {
        // Teardown Code
    }

    MODULE("SuperMath")

    ~~~

    And that is all there is to it.

    \section build Building From Source

    In order to build MT from source, you need a few things

    - clang ( >= 3.5 ), g++ ( >= 4.9 )
    - flex ( >= 2.5 ), bison ( >= 3.4 )
    - libc++, libc++abi
    - gperftools (https://code.google.com/p/gperftools/)
    - doxygen
    - latex, pdflatex

    Once you have everything, you can issue a `make` and it should build a
    debug build for you. If you wish for a release build `make release` is what you want.

    To build the documentation, issue a `make docs` and it will build the docs for you.

    If you wish to enable CPU profiling, `make prof` will build the profiling library into the binary.
    
    \section license License

    The MIT License (MIT)

    Copyright (c) 2014 Vijay Atwater-Van Ness, Trevor Berninger

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

 */
